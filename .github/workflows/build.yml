name: Build and test
on: [push, pull_request]
permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4
        with:
          cache: true
          python-version: 3.13
      - name: Install dependencies
        run: pdm sync -d
      - name: Lint code with Ruff
        run: pdm run ruff check --output-format=github --target-version=py312
      - name: Check code formatting with Ruff
        run: pdm run ruff format --diff --target-version=py312 --check
      - name: Install pixlet
        run: |
          curl -LO "https://github.com/tronbyt/pixlet/releases/download/${PIXLET_VERSION}/pixlet_${PIXLET_VERSION}_linux_amd64.tar.gz"
          sudo tar -C /usr/local/bin -xvf "pixlet_${PIXLET_VERSION}_linux_amd64.tar.gz"
          sudo mv /usr/local/bin/libpixlet.so /usr/lib/libpixlet.so
          rm "pixlet_${PIXLET_VERSION}_linux_amd64.tar.gz"
        env:
          PIXLET_VERSION: v0.43.0
      - name: Test with pytest
        run: pdm run -v pytest tests --doctest-modules --junitxml=junit/test-results.xml
      - name: Type check with mypy
        run: pdm run mypy --strict --install-types --non-interactive --ignore-missing-imports --exclude system-apps --exclude dist .
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      - name: Build
        run: pdm build
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist

  create-release:
    name: Create Github Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-test
    permissions:
      contents: write

    steps:
      - name: Fetch Release Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: release-artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="${GITHUB_REPOSITORY}" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes \
              dist/release-artifacts/*
